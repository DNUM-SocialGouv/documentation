name: Broken Link Check

on:
  #push:
  #  branches: [main]
  #pull_request:
  #  branches: [main]
  #schedule:
  #  - cron: "0 5 * * 1" # Chaque lundi matin √† 7h
  workflow_dispatch:
    inputs:
      check_depth:
        description: "La profondeur d'analyse"
        required: false
        type: number
        default: 5
      check_external:
        description: "Si les liens externes doivent √™tre v√©rifi√©s"
        required: false
        default: "oui"
        type: choice
        options:
          - "oui"
          - "non"
      debug:
        description: "Si le mode debug doit √™tre activ√©"
        required: false
        default: "non"
        type: choice
        options:
          - "oui"
          - "non"

jobs:
  link-check:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5.0.0

      - name: Install python
        uses: actions/setup-python@v6.0.0
        with:
          python-version: "3.13.7"

      - name: Install linkchecker and run analysis
        env:
          CHECK_DEPTH: ${{ inputs.check_depth }}
          CHECK_EXTERNAL: ${{ inputs.check_external }}
          DEBUG: ${{ inputs.debug }}
        run: |
          echo "Installation de Linkchecker..."
          pip3 install linkchecker

          page_to_check="https://dnum-ministeres-sociaux.gitbook.io/ressources/"
          echo "üîç Lancement de la v√©rification des liens pour '$page_to_check'..."

          temp_output=$(mktemp)

          # https://linkchecker.github.io/linkchecker/man/linkchecker.html#options
          command="linkchecker -o failures"

          exclusions='--ignore-url="^https:\/\/msociauxfr\.sharepoint\.com" \
          --ignore-url="^https:\/\/www\.figma\.com" \
          --ignore-url="^https:\/\/portail-api\.insee\.fr" \
          --ignore-url="^https:\/\/factorial\.fr" \
          --ignore-url="^https:\/\/(www.)?systeme-de-design\.gouv\.fr" '

          other_options="--recursion-level=$CHECK_DEPTH"

          if [ "$CHECK_EXTERNAL" == "oui" ]; then
            other_options="$other_options --check-extern"
          fi

          if [ "$DEBUG" == "non" ]; then
            other_options="$other_options --no-status"
          fi

          eval "$command $exclusions $other_options $page_to_check" 2>&1 | tee "$temp_output"

          exit_code=${PIPESTATUS[0]}

          if [ "$DEBUG" == "oui" ]; then
            echo "[DEBUG] Code de sortie : $exit_code"
            echo "[DEBUG] Sortie :"
            cat "$temp_output"
          fi

          if [ "$exit_code" == 0 ]; then
              echo "‚úÖ Aucun lien mort trouv√©."
              rm "$temp_output"
              exit 0
          fi

          problems=()

          while IFS= read -r line; do
            if [[ $line =~ \(\'([^\']*)\',\ \'([^\']*)\'\) ]]; then
              page="${BASH_REMATCH[1]}"
              problem="${BASH_REMATCH[2]}"
              problems+=("  - Page: '$page', probl√®me: '$problem'")
            fi
          done < "$temp_output"

          if [ "${#problems[@]}" -eq 0 ]; then
            echo "‚úÖ Aucun lien mort trouv√©."
            rm "$temp_output"
            exit 0
          fi

          echo "‚ùå R√©sultats de l'analyse :"
          echo ""

          for ((i = 0; i < "${#problems[@]}"; i++)); do
            echo "${problems[i]}"
            echo ""
          done

          echo "Si certains de ces liens morts sont des faux-positifs, excluez-les de l'analyse."

          rm "$temp_output"
          exit 1
